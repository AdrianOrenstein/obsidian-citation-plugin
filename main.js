'use strict';

var obsidian = require('obsidian');
var lunr = require('lunr');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

// TODO
var BBT_EXPORT_PATH = "/home/jon/Zotero/Meine Bibliothek.json";
var MyPlugin = /** @class */ (function (_super) {
    __extends(MyPlugin, _super);
    function MyPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.library = {};
        _this.index = null;
        return _this;
    }
    MyPlugin.prototype.onload = function () {
        var _this = this;
        console.log('loading plugin');
        // const q: PreparedQuery = prepareQuery("foo");
        // const text = "this is a test\nstring with foo\n and bar foo";
        // console.log(fuzzySearch(q, text));
        // Load library export
        obsidian.FileSystemAdapter.readLocalFile(BBT_EXPORT_PATH).then(function (buffer) { return _this.onLibraryUpdate(buffer); });
        this.addCommand({
            id: "insert-citation",
            name: "Insert citation",
            checkCallback: function (checking) {
                if (!checking) {
                    var modal = new InsertCitationModal(_this.app, _this);
                    modal.open();
                }
            }
        });
        this.addRibbonIcon("dice", "Sample Plugin", function () {
            new InsertCitationModal(_this.app, _this).open();
        });
        this.addSettingTab(new SampleSettingTab(this.app, this));
    };
    MyPlugin.prototype.onLibraryUpdate = function (libraryBuffer) {
        // Decode file as UTF-8
        var dataView = new DataView(libraryBuffer);
        var decoder = new TextDecoder("utf8");
        var value = decoder.decode(dataView);
        var libraryArray = JSON.parse(value);
        // Index by bibtex code
        console.log("here", libraryArray.length);
        this.library = Object.fromEntries(libraryArray.map(function (entry) { return [entry.id, entry]; }));
        this.rebuildIndex();
    };
    MyPlugin.prototype.onunload = function () {
        console.log('unloading plugin');
    };
    MyPlugin.prototype.rebuildIndex = function () {
        var b = new lunr.Builder();
        b.field("id");
        b.field("title");
        Object.values(this.library).forEach(function (entry) {
            b.add({
                id: entry.id,
                title: entry.title
            });
        });
        console.log("here");
        this.index = b.build();
    };
    return MyPlugin;
}(obsidian.Plugin));
var SearchModal = /** @class */ (function (_super) {
    __extends(SearchModal, _super);
    function SearchModal(app, plugin) {
        var _this = _super.call(this, app) || this;
        _this.plugin = plugin;
        return _this;
    }
    SearchModal.prototype.getSuggestions = function (query) {
        return this.plugin.index.search(query);
    };
    SearchModal.prototype.renderSuggestion = function (result, el) {
        el.empty();
        var entry = this.plugin.library[result.ref];
        var authorText = entry.author ? entry.author.map(function (a) { return a.given + " " + a.family; }).join(", ") : "";
        var container = el.createEl("div", { cls: "zoteroResult" });
        container.createEl("span", { cls: "zoteroTitle", text: entry.title });
        container.createEl("span", { cls: "zoteroCitekey", text: entry.id });
        container.createEl("span", { cls: "zoteroAuthors", text: authorText });
    };
    SearchModal.prototype.onChooseSuggestion = function (item, evt) {
        console.log(item, evt);
    };
    SearchModal.prototype.onOpen = function () {
        var contentEl = this.contentEl;
        contentEl.setText('Woah!');
    };
    SearchModal.prototype.onClose = function () {
        var contentEl = this.contentEl;
        contentEl.empty();
    };
    return SearchModal;
}(obsidian.SuggestModal));
var InsertCitationModal = /** @class */ (function (_super) {
    __extends(InsertCitationModal, _super);
    function InsertCitationModal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertCitationModal.prototype.onChooseSuggestion = function (value, evt) {
        console.log("chose", value, this.plugin.library[value.ref]);
    };
    return InsertCitationModal;
}(SearchModal));
var SampleSettingTab = /** @class */ (function (_super) {
    __extends(SampleSettingTab, _super);
    function SampleSettingTab() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SampleSettingTab.prototype.display = function () {
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for my awesome plugin.' });
        new obsidian.Setting(containerEl)
            .setName('Setting #1')
            .setDesc('It\'s a secret')
            .addText(function (text) { return text.setPlaceholder('Enter your secret')
            .setValue('')
            .onChange(function (value) {
            console.log('Secret: ' + value);
        }); });
    };
    return SampleSettingTab;
}(obsidian.PluginSettingTab));

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
