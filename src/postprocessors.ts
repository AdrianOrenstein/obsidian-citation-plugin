/**
 * Defines postprocessors on Markdown content.
 */

import type { MarkdownPostProcessorContext } from 'obsidian';
import { MarkdownRenderChild } from 'obsidian';
import type CitationPlugin from './main';

/**
 * Replaces citations with inline references generated by citeproc.
 */
export class InlineCitationRenderer extends MarkdownRenderChild {
  constructor(containerEl: HTMLElement, private plugin: CitationPlugin) {
    super(containerEl);

    this.registerEvent(
      this.plugin.events.on('library-load-complete', () => this.render()),
    );
  }

  onload(): void {
    this.render();
  }

  render(): void {
    if (!this.plugin.library) return;

    // TODO handle chain of references
    // TODO handle pandoc format
    this.containerEl.querySelectorAll('a.internal-link').forEach((link) => {
      if (!(link instanceof HTMLAnchorElement)) return;

      const match = link.pathname.match(/^\/(@(.+))$/);
      if (match) {
        const [, fullMatch, citekey] = match;
        const entry = this.plugin.library.entries[citekey];
        if (entry) {
          // Render inline citation.
          const citation = this.plugin.citationService.renderCitation(
            citekey,
            true,
          );
          if (citation.includes('NO_PRINTED_FORM')) {
            // Error in generating citation. Quit.
            return;
          }

          link.innerHTML = link.innerHTML.replace(fullMatch, citation);
          link.addClass('citation-link');
        }
      }
    });
  }
}
